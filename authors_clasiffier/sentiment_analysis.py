# -*- coding: utf-8 -*-
"""Sentiment Analysis.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DZpWP3IoTy9qHk7N3UKsh529HbrG7rl-
"""

"""Código para interpretar el sentimiento de una canción"""
! pip install nltk
import nltk
nltk.download('punkt')
nltk.download('stopwords')
with open("/AlejandroSanz.txt", 'r', encoding='utf-8') as file:
    text = file.read()
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
import string

# Tokenización
words = word_tokenize(text.lower())  # Convierte a minúsculas

# Eliminación de signos de puntuación y palabras irrelevantes
stop_words = set(stopwords.words('spanish'))
words = [word for word in words if word.isalnum() and word not in stop_words]
# La lógica para determinar la categoría de sentimiento
# Puedes usar análisis de palabras clave, reglas específicas, etc.

#sentiment_category = "positivo"
sentiment_category = ["positivo", "negativo"]
#document = (words, sentiment_category)
#document = [(w,s) for w in words for s in sentiment_category]
#Crea la estructura de datos necesaria para entrenar un modelo o realizar análisis.
positiv = ["amiga","feliz","fuerza","corazón","amaré","besó","cielo","iluminó"]
negative = ["apagan","soledad","crujen","llueve","derramando","silencio","feróz"]

"""Ejemplo de código"""
! pip install nltk
import nltk
from nltk.corpus import movie_reviews
nltk.download('movie_reviews')
documents = [(list(movie_reviews.words(fileid)), category)
             for category in movie_reviews.categories()
             for fileid in movie_reviews.fileids(category)]
import random
random.shuffle(documents)
training_set = documents[:1500]
test_set = documents[1500:]

"""Función para extraer las caractéristicas básicas del mensaje"""

all_words = nltk.FreqDist(w.lower() for w in movie_reviews.words())
word_features = list(all_words)[:3000]

def document_features(document):
    document_words = set(document)
    features = {}
    for word in word_features:
        features[word] = (word in document_words)
    return features
featuresets = [(document_features(d), c) for (d, c) in training_set]
classifier = nltk.NaiveBayesClassifier.train(featuresets)
test_featuresets = [(document_features(d), c) for (d, c) in test_set]
accuracy = nltk.classify.accuracy(classifier, test_featuresets)
print("Accuracy:", accuracy)

movie_reviews

words